- hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  gather_facts: yes
  tasks:
  - name: Get SID
    command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select id from {{ DB_TABLE }} where env="{{ ENV }}" and service="{{ APP_NAME }}"'
    register: SERVICE_ID
  - set_fact: SID="{{SERVICE_ID.stdout}}"

- name: Register a bunch of variables
  hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  gather_facts: yes
  tasks:
    - command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select hostname from {{ DB_TABLE }} where id="{{ SID }}"'
      register: HOST
    - set_fact: HOST="{{HOST.stdout}}"
    - command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select soft_upgrade from {{ DB_TABLE }} where id="{{ SID }}"'
      register: SOFTUPGRADE
    - set_fact: SOFTUPGRADE="{{SOFTUPGRADE.stdout}}"
    - command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select should_run from {{ DB_TABLE }} where id="{{ SID }}"'
      register: VERSION
    - set_fact: VERSION="{{VERSION.stdout}}"
    - command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select count from {{ DB_TABLE }} where id="{{ SID }}"'
      register: COUNT
    - set_fact: COUNT="{{COUNT.stdout}}"
    - command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select param from {{ DB_TABLE }} where id="{{ SID }}"'
      register: PARAM
    - set_fact: PARAM="{{PARAM.stdout}}"
    - command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select command from {{ DB_TABLE }} where id="{{ SID }}"'
      register: COMMAND
    - set_fact: COMMAND="{{COMMAND.stdout}}"
    - command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select arguments from {{ DB_TABLE }} where id="{{ SID }}"'
      register: ARGUMENTS
    - set_fact: ARGUMENTS="{{ARGUMENTS.stdout}}"
#    - debug:
#        msg: Variables are "{{ item }}"
#      with_items:
#        - "{{ HOST.stdout }}"
#        - "{{ SOFTUPGRADE.stdout}}"
#        - "{{ VERSION.stdout }}"
#        - "{{ COUNT.stdout }}"
#        - "{{ PARAM.stdout }}"
#        - "{{ COMMAND.stdout }}"
#        - "{{ ARGUMENTS.stdout }}"

- hosts: tag_role_swarm_master
  vars_files:
    - vars.yml
  gather_facts: yes
  tasks:
  - name: Get container ID
#    command: "docker -H tcp://{{ HOST.stdout }}.{{ SUFFIX }}:4998 ps -aqf name={{ APP_NAME }}"
    command: "docker ps -aqf name={{ APP_NAME }}"
    register: container_id
  - set_fact: CID="{{container_id.stdout}}"

#  - name: Remove container
#    command: mysql -u {{ USERNAME }} {{ DB }} -Ns -e 'select count(hostname) from {{ DB_TABLE }} where env="{{ ENV }}" and id="{{ SID }}"'
#   command: "docker rm -f {{ CID }}"
#    debug:
#      msg: "docker -H tcp://{{ HOST.stdout }}.{{ SUFFIX }}:4998 rm -f {{ CID }}"

#  - name: Create container
    #command: "docker run {{ PARAM.stdout }} --restart=no --log-driver=syslog --name {{ APP_NAME }} -dit hub.halo.ninja:4997/{{ APP_NAME }}:{{ VERSION.stdout }} {{ COMMAND.stdout }} {{ ARGUMENTS.stdout }}"
#    debug:
#      msg: "docker -H tcp://{{ HOST.stdout }}.{{ SUFFIX }}:4998 run {{ PARAM.stdout }} --restart=no --log-driver=syslog --name {{ APP_NAME }}-js -dit hub.halo.ninja:4997/{{ APP_NAME }}:{{ VERSION.stdout }} {{ COMMAND.stdout }} {{ ARGUMENTS.stdout }}"

#- hosts: tag_role_swarm_master
#  vars_fileas:
#  - vars.yml
#  gather_facts: yes
#  tasks:
  - name: Create Swarm Service for {{ APP_NAME }}
    command: "docker service create --name {{ APP_NAME }}-{{ BUILD_NUMBER }} --replicas {{ REPLICAS }} {{ hostvars['localhost']['PARAM'] }} --restart-condition=none --log-driver=syslog -d {{ REGISTRY }}/{{ APP_NAME }}:{{ hostvars['localhost']['VERSION'] }} {{ hostvars['localhost']['COMMAND'] }} {{ hostvars['localhost']['ARGUMENTS'] }}"
#    debug:
#      msg: "docker service create --name {{ APP_NAME }}-js --replicas {{ REPLICAS }} {{ hostvars['localhost']['PARAM'] }} --restart-condition=none --log-driver=syslog --publish {{ PUBLISH }} -d {{ REGISTRY }}/{{ APP_NAME }}:{{ hostvars['localhost']['VERSION'] }} {{ hostvars['localhost']['COMMAND'] }} {{ hostvars['localhost']['ARGUMENTS'] }}"
